Домашнее задание по теме "Режимы открытия файлов"
Цель: закрепить знания о работе с файлами (чтение/запись) решив задачу.
Задача "Учёт товаров":
Необходимо реализовать 2 класса Product и Shop, с помощью которых будет производиться запись в файл с продуктами.
Объекты класса Product будут создаваться следующим образом - Product('Potato', 50.0, 'Vagetables') и обладать следующими свойствами:
Атрибут name - название продукта (строка).
Атрибут weight - общий вес товара (дробное число) (5.4, 52.8 и т.п.).
Атрибут category - категория товара (строка).
Метод __str__, который возвращает строку в формате '<название>, <вес>, <категория>'. Все данные в строке разделены запятой с пробелами.
Объекты класса Shop будут создаваться следующим образом - Shop() и обладать следующими свойствами:
Инкапсулированный атрибут __file_name = 'products.txt'.
Метод get_products(self), который считывает всю информацию из файла __file_name, закрывает его и возвращает единую строку со всеми товарами из файла __file_name.
Метод add(self, *products), который принимает неограниченное количество объектов класса Product. Добавляет в файл __file_name каждый продукт из products, если его ещё нет в файле (по названию). Если такой продукт уже есть,
то не добавляет и выводит строку 'Продукт <название> уже есть в магазине' .

class Product:
#      Здесь метод init предназначен для инициализации объекта. Он принимает три параметра: name, weight и category,
#      и присваивает их атрибутам экземпляра класса (self).
    def __init__(self,name,weight,category):
        self.name=name
        self.weight=weight
        self.category=category
#       Метод__str__ возвращает строку, представляющую объект в виде формата "имя, вес, категория".
    def __str__(self):
        return f"{self.name},{self.weight},{self.category}"
class Shop:
#      Метод init устанавливает имя файла для хранения продуктов. Он инициализируется при создании объекта.
    def __init__(self):
        self.__file_name = 'products.txt'
#       Этот метод открывает файл products.txt в режиме чтения (r), считывает его содержимое и возвращает его.
#       Важно закрывать файл после чтения, что выполнено в коде.
    def get_products(self):
        file = open(self.__file_name,'r')
        content = file.read()
        file.close()
        return content
# Добавление продуктов.
#       метод def add принимает произвольное количество объектов Product (указанных через *products).
#       Он открывает файл в режиме добавления (a+), что позволяет как добавлять новые данные,
#       так и читать уже существующие.
    def add(self, *products):
        names = []
        file = open(self.__file_name,'a+')
#       file.seek(0) перемещает указатель файла в начало, чтобы прочитать его содержимое.
#       Сначала в names собираются имена продуктов из уже существующих строк в файле.
#       Затем, для каждого переданного продукта, проверяется, уже существует ли он (по имени).
#        Если существует, выводится сообщение; если нет, продукт добавляется в файл.
        file.seek(0)
        for line in file:
            name = line.split(', ')[0]
            names.append(name)
        for product in products:
            if product.name in names:
                print(f"Продукт{product.name} уже есть в магазине")
            else:
                file.write(f'{product}\n')
                names.append(product.name)
        file.close()

s1 = Shop()
p1 = Product('Potato', 50.5, 'Vegetables')
p2 = Product('Spaghetti', 3.4, 'Groceries')
p3 = Product('Potato', 5.5, 'Vegetables')
print(p2) # __str__
s1.add(p1, p2, p3)
print(s1.get_products())
